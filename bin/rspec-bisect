#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.join(__FILE__, "..", "..", "lib"))

require 'yaml'
require 'open3'
require 'rspec-bisect'

original_args = ARGV.join(" ")
options, filtered_args = RSpecBisect::OptionParser.parse_with_residual!(ARGV)

unless options.has_key?(:order)
  $stderr.puts "You haven't specified an order for the spec run."
  $stderr.puts "Without one, this tool is unable to reproduce order-dependent failures."
  exit(1)
end

def bundle_prefix(options)
  options[:bundler] ? 'bundle exec' : ''
end

def order_for(tree, examples)
  tree.filter(examples).to_a.flatten.drop(1)
end

def bisect(candidates)
  low  = 0
  high = candidates.length - 1
  while low < high do
    puts "Searching #{candidates[low..high].count} examples"
    mid = (low + high) / 2
    if yield(candidates[low..mid])
      low = mid + 1
    else
      high = mid
    end
  end
  candidates[low]
end

bisect_command = "#{bundle_prefix(options)} rspec #{filtered_args.join(" ")} \
                  --require rspec-bisect/ordering/specified".squeeze(" ")
recording_command = "#{bundle_prefix(options)} rspec #{original_args} \
                     --require rspec-bisect/formatters/recording \
                     --format RSpecBisect::Formatters::Recording".squeeze(" ")

puts "Recording failing example order"
puts recording_command
Open3.popen2e(recording_command) do |stdin, stdout_and_stderr, wait_thr|
  out = stdout_and_stderr.read
  if wait_thr.value.success?
    $stderr.puts "Errr... this passed:"
    $stderr.write out
    exit(1)
  elsif !(out =~ /Finished.*seconds/)
    $stderr.puts "Recording seems to have failed:"
    $stderr.write out
    exit(1)
  end
end

tree     = YAML.load_file("tree.yml")
examples = tree.leaves
failure  = examples.pop

culprit = bisect(examples) do |candidates|
  items = candidates + [failure]
  order = order_for(tree, items)
  File.open("order.log", "w") { |f| f.puts(order) }
  result = false
  Open3.popen3(bisect_command) do |_i, _o, _e, wait_thr|
    result = wait_thr.value.success?
  end
  result
end

puts
puts "The culprit appears to be at #{culprit}"
